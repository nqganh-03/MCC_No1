import os
import pygame
import subprocess
from midiutil import MIDIFile
from pydub import AudioSegment

# --- CONFIG ---
FLUIDSYNTH_PATH = r"C:\Users\ADMIN\fluidsynth-2.4.5\bin\fluidsynth.exe"
SOUNDFONT_PATH = os.path.abspath("FluidR3_GM.sf2")
RECORDED_WAV = os.path.abspath("recorded_audio.wav")
MIDI_FILE = os.path.abspath("new_jazz_theme.mid")
MIDI_RENDERED_WAV = os.path.abspath("midi_rendered.wav")
FINAL_MIX_WAV = os.path.abspath("final_mix.wav")
FINAL_MIX_OPUS = os.path.abspath("final_mix.opus")

# --- FUNCTIONS ---

def generate_jazz_midi(output_path):
    print("[INFO] Generating jazz-style MIDI...")

    track = 0
    channel = 0
    time = 0
    tempo = 120
    volume = 100

    midi = MIDIFile(1)
    midi.addTrackName(track, time, "New Jazz Composition")
    midi.addTempo(track, time, tempo)

    bass_notes = [48, 50, 52, 53, 55, 57, 59, 60]
    for i, note in enumerate(bass_notes * 3):
        midi.addNote(track, channel, note, time + i * 0.5, 0.5, volume)

    chords = [(60, 64, 67), (63, 67, 70), (62, 65, 69), (65, 69, 72)]
    for i, chord in enumerate(chords * 2):
        for note in chord:
            midi.addNote(track, channel, note, time + i * 2, 1.5, volume - 10)

    with open(output_path, "wb") as f:
        midi.writeFile(f)

    print(f"[INFO] MIDI saved to: {output_path}")
    return True

def render_midi_to_wav(midi_path, soundfont_path, output_wav):
    print("[INFO] Rendering MIDI to WAV with FluidSynth...")
    subprocess.run([
        FLUIDSYNTH_PATH,
        "-ni",
        "-F", output_wav,
        "-r", "44100",
        soundfont_path,
        midi_path
    ], check=True)

def mix_audio_tracks(jazz_path, voice_path, output_path):
    print("[INFO] Mixing voice and jazz track...")
    jazz = AudioSegment.from_wav(jazz_path)
    voice = AudioSegment.from_wav(voice_path)

    min_len = min(len(jazz), len(voice))
    jazz = jazz[:min_len]
    voice = voice[:min_len]

    mixed = jazz.overlay(voice)
    mixed.export(output_path, format="wav")
    print(f"ðŸŽ¶ Mixing complete! Output saved to '{output_path}'")

def compress_to_opus(input_wav, output_opus):
    print("[INFO] Compressing final mix to Opus (CELP)...")
    subprocess.run([
        "ffmpeg",
        "-y",
        "-i", input_wav,
        "-c:a", "libopus",
        "-b:a", "64k",
        output_opus
    ], check=True)
    print(f"[INFO] Final compressed file saved: {output_opus}")

def play_midi(midi_file):
    print(f"[INFO] Playing MIDI: {midi_file}")
    pygame.init()
    pygame.mixer.init()
    try:
        pygame.mixer.music.load(midi_file)
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)
    except Exception as e:
        print("[ERROR] Failed to play MIDI:", e)
    finally:
        pygame.quit()

# --- MAIN ---
if __name__ == "__main__":
    if generate_jazz_midi(MIDI_FILE):
        render_midi_to_wav(MIDI_FILE, SOUNDFONT_PATH, MIDI_RENDERED_WAV)
        mix_audio_tracks(MIDI_RENDERED_WAV, RECORDED_WAV, FINAL_MIX_WAV)
        compress_to_opus(FINAL_MIX_WAV, FINAL_MIX_OPUS)
        play_midi(MIDI_FILE)

